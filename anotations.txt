Tudo inicio opela firefox, com Firefox OS, que permitia baixar as webapps, onde a ideia deles tambem era levar smartphones para paises que nao haviam tipo a africa, 
isso surgiu tbm parceria com algumas empresa que veio tbm o WEBGL.
Os apps hibridos, e pura gambiarra, mas funciona, problema que com isso se perde performance.
ECMASCRIPT e o padrao nome real, porem por causa do JAVA que eles queriam empurrar que JS e jao bom por isso botaram como um nome comercial JAVASCRIPT
Onde tem o grupo TC39, que eles definem os padrao da linguagem hoje que o foco e nao quebrar a WEB.
Gracas a esse grupo o linguagem cresceu muito, e em crescendo em padroes para nao quebrar o web.
Criador do NODEJS foi um Matematico, RYAHL DAWN, ele ia fazer em C, mas descobriu com conselho de outros que JS estava em alta e vindo sendo bem aproveitado e e felz o NODEJS

PWA:
Problemas que elas querem resolver? 
- Processamento e temperatura; google boto bolsa de gelo nele e identificoq ue fica bem mais rapido
- Tamanho dos Apps nativos sáo muito grandes; exemplo teve caso de 80 mb mudou para 5 mb;
- Para manter uma equipe unica, evitando ter varias equipe de android, mac, etc... agora focando em uma equipe unica focado numa tecnologia, assim gerando economia para empresa, e tendo um equipe mais empenhada;
- Vantagem tambem e layouta a pagina com html e css, onde em apps nativos e muito mais trabalhoso e perde tempo de desenvolvimento do app nativo;
- Com PWA vem a ideia de evitar o LIE-FI com OFLINE FIRST;



Dispositivos hoje sao bem mais rapidos, cada dia vem evoluindo cada dia mais, assim como os softwares vem evoluindo.

FOCA NA PERFORMANCE, POREM DEIXA SEU CODIO MAIS ILEGIVEL, MAS MESMO ASSIM TEM QUE FOCAR NA PERFOMANCE.

JS HOJE E UMA DAS LINGUAGENS MAIS PERTO DE C, GRACAS AO GEDIT, se a funcao passou mais de 2 ou 3 vezes o gedit evita dele passa no interpetrador de novo e ja puxa ela mais rapidamente.
O GEDIT seria um optimizador do JAVASCRIPT, recomendamos use coisas concisas.

WEB ABERTA VEM FAZENDO O MUNDO MUDAR...

Toda WEB tem que ser HTTPS usando SSL, até o google e a mozilla, tem campanhas da WEB SEGURA, recomendou CLOUDFLARE, LETS ENCRYPT, NOW.APP;

Antes de ontem a APPLE (SAFARI) agora aceita SERVICE WORKER. Eles demoraram, ou seja, pisam no freio, por causa de dinheiro. Mas eles comecaram a notar os beneficios que o povo vem usando e comecaram a aceitar;

Service worker e 100% assincrono.

vamos ver / user
- cacheAPI
- webSockets
- webWorkers
- webRTC

Promise sempre e assincrono;
Promise sao ATEMPORAIS -  uma vez resolvida ela sempre estara resolvida.
JAVASCRIPT ACEITA ACENTOS ele é UTF-8

PROMISE.RACE = ele faz uma corrida qual retorna primeiro ou seja tipo corrida de lebre threads paralela.

Fetch = vai buscar;
Ele e uma promise;
ex.: fetch('https://api.github.com/users/braziljs/repos').then(responseObject => { responseObject.json().then(console.log)});
no FETCh ele resolve sempre, ou seja, so vai rejeitar quando nao houver comunicacao com o servidor ou o usuario por fora de conexao ou algo do genero;

estudar CORS

cacheAPI: 
 - Ele salva o Request e o Response tudo junto!
 - Ele e considerado um banco de dados e pode ser usado ate 50% do espaco livre do seu computador;

JSON padrao nao tem comentarios

Install LIGHTHOUSE no google chrome

serviceWorker:
 - ele roda tipo o webWorker, porem ele segue rodando ate com o navegador fechado
 - ele obedece o escope de suas url tipo se for /bla ele inicia apartir dessa rota.
 - deve ser instalado
 - ele suporta promise
 - ele nao chuta outros serviceWorker ele entra na fila e aguarda sua vez
 - ele tem que ta na raiz ele so vai trabalhar sobre os filhos deles
